确保 `conftest.py` 文件在测试目录中，pytest 才能发现它。
如果 `conftest.py` 和测试文件（如 `test_inventory.py`）不在同一目录下，可能会导致夹具无法找到。

- `@pytest.fixture` 是一个装饰器，用于表示一个测试夹具，以便在测试函数执行前设置某些数据或状态并在测试完成后进行清理。
- `scope` 参数控制测试夹具的生命周期。常见的选项包括：
- `'function'`：默认值，每个测试函数都会调用这个夹具。
- `'class'`：在同一个测试类的所有测试方法中共享。
- `'module'`：在同一个测试模块中共享。
- `'session'`：在整个测试会话中共享。



要使 `add_product` 方法在第一次调用时只添加数据，而在之后的测试调用中不重复添加，
可以把添加商品的逻辑移到一个更高范围的夹具中（比如 `session` 作用域）或在 `setUp` 方法中（如果你是在类中进行测试）。
这样可以确保在整个测试会话中只执行一次添加操作。

### 解决方案

1. **使用 `session` 作用域的夹具进行初始化**：

将 `get_add_data` 夹具的作用域改为 `'session'`，这样在整个测试会话中只会执行一次。在夹具中添加商品的操作只会被执行一次，之后的测试将复用这个夹具的返回值。

import pytest
from exam_15.src.inventory_system import Product

@pytest.fixture(scope='session')
def get_add_data():
    product1 = Product()
    product1.add_product('a', 1, 3)
    product1.add_product('b', 2, 4)
    product1.add_product('c', 3, 5)
    return product1  # 返回这个产品实例以供测试函数使用

2. **在测试类中进行初始化**：

如果你在一个类中进行测试，你可以将 `get_add_data` 用作一个夹具，并在每个测试方法中直接引用它。为了不重复添加商品数据，可以在 `setUp` 方法中进行初始化。

class TestInventory:
    @pytest.fixture(autouse=True)
    def setup(self, get_add_data):
        self.product = get_add_data  # 使用夹具获得的产品实例

    @pytest.mark.parametrize('name,expected', [("a", "商品存在"), ("b", "商品存在"), ("c", "商品存在")], ids=['a', 'b', 'c'])
    def test_check_product(self, name, expected):
        assert self.product.check_product(name) == expected

### 运行测试

使用以上的设置，你可以保证在运行所有的测试时，商品只会添加一次，而不会在每个测试方法调用时重复添加。
这样，运行的输出将会显示 `add_product` 只在第一次调用时触发其逻辑。

### 清理（可选）

如果你还需要在测试的最后进行一些清理（例如删除测试数据），可以考虑将清理逻辑添加到夹具中，或者实现 `yield` 语句来在测试完成后执行清理代码。

@pytest.fixture(scope='session')
def get_add_data():
    product1 = Product()
    product1.add_product('a', 1, 3)
    product1.add_product('b', 2, 4)
    product1.add_product('c', 3, 5)

    yield product1  # 在这里返回产品实例

    # 清理逻辑，例如：
    print("清理库存")  # 假设这里是清理库存的逻辑
通过这些修改，你的 `add_product` 方法在第二次和第三次测试调用时不会再重复执行添加操作。